@page "/TodoTasks"

<h1 class="mb-3">Todo List</h1>

@if(todoTasks == null){
	<p><em>Loading..</em></p>
}else{
	<!-- Task Summary -->
	<div class="alert alert-info d-flex justify-content-between">
		<span>
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hourglass" viewBox="0 0 16 16">
				<path d="M2 1.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1-.5-.5m2.5.5v1a3.5 3.5 0 0 0 1.989 3.158c.533.256 1.011.791 1.011 1.491v.702c0 .7-.478 1.235-1.011 1.491A3.5 3.5 0 0 0 4.5 13v1h7v-1a3.5 3.5 0 0 0-1.989-3.158C8.978 9.586 8.5 9.052 8.5 8.351v-.702c0-.7.478-1.235 1.011-1.491A3.5 3.5 0 0 0 11.5 3V2z" />
			</svg>
			Completed: <strong>@CompletedCount</strong>
		</span>
		<span>
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hourglass-split" viewBox="0 0 16 16">
				<path d="M2.5 15a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1zm2-13v1c0 .537.12 1.045.337 1.5h6.326c.216-.455.337-.963.337-1.5V2zm3 6.35c0 .701-.478 1.236-1.011 1.492A3.5 3.5 0 0 0 4.5 13s.866-1.299 3-1.48zm1 0v3.17c2.134.181 3 1.48 3 1.48a3.5 3.5 0 0 0-1.989-3.158C8.978 9.586 8.5 9.052 8.5 8.351z" />
			</svg> 
			Incomplete: <strong>@IncompleteCount</strong>
		</span>
		<span>
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hourglass-bottom" viewBox="0 0 16 16">
				<path d="M2 1.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1-.5-.5m2.5.5v1a3.5 3.5 0 0 0 1.989 3.158c.533.256 1.011.791 1.011 1.491v.702s.18.149.5.149.5-.15.5-.15v-.7c0-.701.478-1.236 1.011-1.492A3.5 3.5 0 0 0 11.5 3V2z" />
			</svg> 
			Due: <strong>@DueCount</strong>
		</span>
	</div>
	<!-- Top Bar: Add Task & Filters -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <a class="btn btn-primary" href="/TodoTasks/Create">Add Task</a>

        <div class="d-flex gap-2">
			<!-- Category Filter -->
			<select class="form-select form-select-sm" @bind-value="selectedCategory" @bind-value:event="onchange">
				<option value="">All Categories</option>
				@foreach (var category in categories)
				{
					<option value="@category">@category</option>
				}
			</select>

			<!-- Status Filter -->
			<select class="form-select form-select-sm" @bind-value="selectedStatus" @bind-value:event="onchange">
				<option value="">All Status</option>
				<option value="Completed">Completed</option>
				<option value="Not Completed">Not Completed</option>
			</select>
        </div>
    </div>

	<div class="container">
		@foreach (var tdt in filteredTasks)
		{
			<div class="row">
				<div class="col-12">
					<div class="card mb-3 shadow-sm p-3">
						<div class="card-body">
							<!-- Task Name, Description, and Dates -->
							<div class="d-flex justify-content-between align-items-center">
								<div>
									<h4 class="card-title mb-1">@tdt.Name</h4>
									<p class="card-text text-muted">@tdt.Description</p>
								</div>
								<div class="text-end">
									<p class="mb-1"><strong>Created:</strong> @tdt.Created.ToShortDateString()</p>
									<p class="mb-0 @(tdt.IsCompleted ? "" : "text-danger")">
										<strong>Due:</strong> @tdt.DueDate?.ToShortDateString()
									</p>
								</div>
							</div>

							<!-- Category, Status & Buttons -->
							<div class="d-flex justify-content-between align-items-center mt-3">
								<div>
									<span class="badge bg-secondary">Category @tdt.CategoryId</span>
									@if (tdt.IsCompleted)
									{
										<span class="badge bg-success ms-2">Completed</span>
									}
									else
									{
										@if (tdt.DueDate < DateTime.Now)
										{
											<span class="badge bg-danger ms-2">Due</span>
										}
										else
										{
											<span class="badge bg-warning text-dark ms-2">Not Completed</span>
										}
									}
								</div>

								<div>
									<a class="btn btn-primary btn-sm" href="/TodoTasks/Edit/@tdt.Id">Edit</a>
									<button class="btn btn-danger btn-sm" @onclick="async () => await DeleteTask(tdt.Id)">
										Delete
									</button>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		}
	</div>
}

@inject HttpClient http


@code {
	private List<TodoTasks>? todoTasks;
	private List<TodoTasks> filteredTasks = new();
	private List<int> categories = new();
	private string? selectedCategory = "";
	private string? selectedStatus = "";

	private int CompletedCount => todoTasks?.Count(t => t.IsCompleted) ?? 0;
	private int IncompleteCount => todoTasks?.Count(t => !t.IsCompleted && t.DueDate >= DateTime.Now) ?? 0;
	private int DueCount => todoTasks?.Count(t => !t.IsCompleted && t.DueDate < DateTime.Now) ?? 0;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			todoTasks = await http.GetFromJsonAsync<List<TodoTasks>>("api/TodoTask");
			if (todoTasks != null)
			{
				categories = todoTasks.Select(t => t.CategoryId).Distinct().ToList();
				filteredTasks = new List<TodoTasks>(todoTasks);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error fetching data: {ex.Message}");
		}
	}

	protected override void OnParametersSet()
	{
		FilterTasks();
	}
	private async Task DeleteTask(int id)
	{
		await http.DeleteAsync("api/TodoTask/" + id);
		todoTasks = await http.GetFromJsonAsync<List<TodoTasks>>("api/TodoTask");
	}
	private void FilterTasks()
	{
		if (todoTasks == null) return;

		filteredTasks = todoTasks
			.Where(t =>
				(string.IsNullOrEmpty(selectedCategory) || t.CategoryId.ToString() == selectedCategory) &&
				(string.IsNullOrEmpty(selectedStatus) ||
					(selectedStatus == "Completed" && t.IsCompleted) ||
					(selectedStatus == "Not Completed" && !t.IsCompleted))
			).ToList();
	}
}
